package domain

import (
	"time"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// AuthToken represents a stored authentication token for a user.
// It corresponds to the nested objects in the 'tokens' and 'tempTokens' arrays.
type AuthToken struct {
	Token string `bson:"token" json:"-"` // The token itself, omitted from JSON responses.
	UUID string  `bson:"uuid" json:"uuid"`
	Time time.Time `bson:"time" json:"time"`
}

// User represents the core user model in the application
// It holds all the data related to a user, mirroring the Mongoose schema
// Struct tags (`bson` and `json`) are used to control how the data is stored
// in MongoDB and how it's serialized for API responses
type User struct {
	// ID is the unique identifier for the user, generated by MongoDB.
	ID primitive.ObjectID `bson:"_id,omitempty" json:"id"`

	// Email is the user's login email, It's marked as unique in the database index
	Email string `bson:"email" json:"email"`

	// PasswordHash is the hashed version of the user's password
	// It's tagged with `json:"-"` to ensure it's never exposed in API responses
	PasswordHash string `bson:"password" json:"-"`

	// Tokens holds the user's active refresh tokens
	Tokens []AuthToken `bson:"tokens" json:"-"`

	// TempTokens holds temporary-use tokens (e.g., for video streaming)
	TempTokens []AuthToken `bson:"tempTokens" json:"-"`

	// PrivatKey is the encrypted key used for file encryption, stored as a hex string
	PrivatKey string `bson:"privateKey,omitempty" json:"-"`

	// PublicKey is the IV used for the private key encryption, stored as a hex string
	PublicKey string `bson:"publicKey,omitempty" json:"-"`

	// EmailVerified indicates whether the user has verified their email address.
	// We use a pointer to distinguish between "false" and "not set"
	EmailVerified *bool `bson:"emailVerified,omitempty" json:"-"`

	// EmailToken is a short-lived, encrypted token for verifying the email address
	EmailToken *string `bson:"emailToken,omitempty" json:"-"`

	// PasswordResetToken is a short-lived, encrypted token for resetting the password.
	PasswordResetToken *string `bson:"passwordResetToken,omitempty" json:"-"`

	// PasswordLastModified stores the timestamp of the last password change.
	// this is useful for invalidating older tokens after a password reset.
	PasswordLastModified *string `bson:"passwordLastModified,omitempty" json:"-"`

	// CreatedAt is the timestamp when the user document was created
	CreatedAt time.Time `bson:"createdAt" json:"createdAt"`

	// UpdatedAt is the timestamp when the user document was last updated
	UpdatedAt time.Time `bson:"updatedAt" json:"updatedAt"`
}

// PublicUser is a subset of the User struct, designed to be safely exposed
// through the API. It omits sensitive fields like passwords and tokens
type PublicUser struct {
	ID			  primitive.ObjectID `json:"id"`
	Email		  string			 `json:"email"`	
	EmailVerified *bool				 `json:"emailVerified,omitempty"`
	CreatedAt	  time.Time			 `json:"createdAt"`
	UpdatedAt	  time.Time			 `json:"updatedAt"`
}

// ToPublic converts a User struct to a PublicUser struct, ensuring that
// no sensitive information is leaked
func (u *User) ToPublic() *PublicUser {
	return &PublicUser {
		ID:			   u.ID,
		Email:		   u.Email,	
		EmailVerified: u.EmailVerified,
		CreatedAt:	   u.CreatedAt,
		UpdatedAt:	   u.UpdatedAt,
	}
}
package mongo

import (
	"context"
	"errors"

	"E-Vault/internal/domain"
	"E-Vault/internal/store"

	"go.mongodb.org/mongo-driver/v2/bson"
	"go.mongodb.org/mongo-driver/v2/mongo"
)

const userCollection = "users"

// UserStore is the MongoDB implementaion of the store.UserStore interface
type UserStore struct {
	db *mongo.Database
}

// NewUserStore creates a new UserStore
func NewUserStore(db *mongo.Database) *UserStore {
	return &UserStore{db: db}
}

// Create inserts a new user document into the users collection
func (s *UserStore) Create(ctx context.Context, user *domain.User) error {
	res, err := s.db.Collection(userCollection).InsertOne(ctx, user)
	if err != nil {
		// This checks for a duplicate key error (E11000) and returns our custom
		// store.ErrConflict for the service layer to handle
		if mongo.IsDuplicateKeyError(err) {
			return store.ErrConflict
		}
		return err
	}

	// Set the user's ID to the one generated by MongoDB
	user.ID = res.InsertedID.(bson.ObjectID)
	return nil
}

// Update updates an existing user document in the users collection
func (s *UserStore) Update(ctx context.Context, user *domain.User) error {
	filter := bson.M{"_id": user.ID}
	_, err := s.db.Collection(userCollection).ReplaceOne(ctx, filter, user)
	return err
}

// FindByEmail finds a user by their email. It returns store.ErrNotFound if no user is found
func (s *UserStore) FindByEmail(ctx context.Context, email string) (*domain.User, error) {
	var user domain.User
	filter := bson.M{"email": email}

	err := s.db.Collection(userCollection).FindOne(ctx, filter).Decode(&user)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, store.ErrNotFound
		}
		return nil, err
	}
	return &user, nil
}

// FindByID finds a user by their ID. It returns store.ErrNotFound if no user is found
func (s *UserStore) FindByID(ctx context.Context, id bson.ObjectID) (*domain.User, error) {
	var user domain.User
	filter := bson.M{"_id": id}

	err := s.db.Collection(userCollection).FindOne(ctx, filter).Decode(&user)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, store.ErrNotFound
		}
		return nil, err
	}

	return &user, nil
}
